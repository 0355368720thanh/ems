Index: app/src/main/java/com/example/expensemanagementstudent/Fragment/InsightFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.expensemanagementstudent.Fragment;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.database.Cursor;\r\nimport android.graphics.Color;\r\nimport android.graphics.Typeface;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.expensemanagementstudent.R;\r\nimport com.example.expensemanagementstudent.db.ExpenseDB;\r\nimport com.github.mikephil.charting.charts.PieChart;\r\nimport com.github.mikephil.charting.data.PieData;\r\nimport com.github.mikephil.charting.data.PieDataSet;\r\nimport com.github.mikephil.charting.data.PieEntry;\r\nimport com.github.mikephil.charting.formatter.PercentFormatter;\r\nimport com.github.mikephil.charting.utils.ColorTemplate;\r\n\r\nimport java.text.NumberFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Locale;\r\n\r\npublic class InsightFragment extends Fragment {\r\n\r\n    private PieChart pieChart, halfDonutChart;\r\n    private LinearLayout categoryOverviewLayout;\r\n    private ExpenseDB expenseDB;\r\n    private int userId; // Lấy userId động\r\n    private Spinner monthSpinner, yearSpinner;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_insight, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        // Kết nối PieChart, Spinner và Layout\r\n        pieChart = view.findViewById(R.id.pieChart);\r\n        halfDonutChart = view.findViewById(R.id.halfDonutChart);\r\n        monthSpinner = view.findViewById(R.id.monthSpinner);\r\n        yearSpinner = view.findViewById(R.id.yearSpinner);\r\n        categoryOverviewLayout = view.findViewById(R.id.categoryOverviewLayout);\r\n        expenseDB = new ExpenseDB(requireContext());\r\n\r\n        // Lấy userId từ SharedPreferences\r\n        SharedPreferences sharedPreferences = requireContext().getSharedPreferences(\"LoginPrefs\", Context.MODE_PRIVATE);\r\n        userId = sharedPreferences.getInt(\"userId\", -1);\r\n\r\n        // Kiểm tra nếu userId không có thì không làm gì thêm\r\n        if (userId == -1) {\r\n            // Xử lý userId invalid (ví dụ: show error)\r\n            return;\r\n        }\r\n\r\n        // Thiết lập Adapter cho Spinner\r\n        ArrayAdapter<String> monthAdapter = new ArrayAdapter<>(\r\n                requireContext(),\r\n                android.R.layout.simple_spinner_item,\r\n                getMonths()\r\n        );\r\n        monthAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        monthSpinner.setAdapter(monthAdapter);\r\n\r\n        ArrayAdapter<String> yearAdapter = new ArrayAdapter<>(\r\n                requireContext(),\r\n                android.R.layout.simple_spinner_item,\r\n                getYears()\r\n        );\r\n        yearAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        yearSpinner.setAdapter(yearAdapter);\r\n\r\n        // Lắng nghe sự kiện chọn tháng và năm\r\n        AdapterView.OnItemSelectedListener onItemSelectedListener = new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                String selectedMonth = String.format(\"%02d\", monthSpinner.getSelectedItemPosition() + 1); // Tháng dạng \"01\", \"02\", ...\r\n                String selectedYear = yearSpinner.getSelectedItem().toString();\r\n                updateChartAndOverview(selectedMonth, selectedYear, getMonths()[monthSpinner.getSelectedItemPosition()]);\r\n                updateHalfDonutChart(selectedMonth, selectedYear);\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n                // Không cần xử lý\r\n            }\r\n        };\r\n        monthSpinner.setOnItemSelectedListener(onItemSelectedListener);\r\n        yearSpinner.setOnItemSelectedListener(onItemSelectedListener);\r\n\r\n        // Khởi tạo dữ liệu cho tháng và năm đầu tiên\r\n        monthSpinner.setSelection(0); // Mặc định tháng 1\r\n        yearSpinner.setSelection(getCurrentYearPosition()); // Mặc định năm hiện tại\r\n    }\r\n\r\n    private void updateChartAndOverview(String month, String year, String monthName) {\r\n        pieChart.setCenterText(\"Expenses for \" + monthName + \" \" + year);\r\n        pieChart.setCenterTextSize(18f);\r\n\r\n\r\n        // Lấy dữ liệu từ database\r\n        Cursor cursor = expenseDB.getExpenseByCategoryAndMonth(userId, month, year);\r\n        ArrayList<PieEntry> pieEntries = new ArrayList<>();\r\n        ArrayList<Integer> colors = new ArrayList<>();\r\n        categoryOverviewLayout.removeAllViews(); // Xóa dữ liệu cũ\r\n\r\n        // Tiêu đề \"Category Overview\"\r\n        TextView overviewTitle = new TextView(requireContext());\r\n        overviewTitle.setText(\"Category Overview\");\r\n        overviewTitle.setTextColor(Color.BLACK);\r\n        overviewTitle.setPadding(0, 16, 0, 8);\r\n        categoryOverviewLayout.addView(overviewTitle);\r\n\r\n        if (cursor.moveToFirst()) {\r\n            float totalAmount = 0;\r\n            do {\r\n                totalAmount += cursor.getFloat(1);\r\n            } while (cursor.moveToNext());\r\n\r\n            cursor.moveToFirst(); // Reset lại cursor để sử dụng lại\r\n\r\n            int[] availableColors = ColorTemplate.MATERIAL_COLORS; // Danh sách màu mặc định\r\n            int colorIndex = 0;\r\n\r\n            do {\r\n                String category = cursor.getString(0);\r\n                float amount = cursor.getFloat(1);\r\n                float percentage = (amount / totalAmount) * 100;\r\n\r\n                // Thêm dữ liệu vào PieChart\r\n                pieEntries.add(new PieEntry(percentage, category));\r\n                colors.add(availableColors[colorIndex % availableColors.length]);\r\n                colorIndex++;\r\n\r\n                // Hiển thị danh mục và số tiền trong giao diện\r\n                LinearLayout itemLayout = new LinearLayout(requireContext());\r\n                itemLayout.setOrientation(LinearLayout.HORIZONTAL);\r\n                itemLayout.setPadding(0, 8, 0, 8);\r\n\r\n                View colorIndicator = new View(requireContext());\r\n                colorIndicator.setLayoutParams(new LinearLayout.LayoutParams(24, 24));\r\n                colorIndicator.setBackgroundColor(colors.get(colors.size() - 1)); // Màu tương ứng\r\n\r\n                TextView categoryText = new TextView(requireContext());\r\n                categoryText.setText(category);\r\n                categoryText.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));\r\n                categoryText.setTextSize(14f);\r\n                categoryText.setTextColor(Color.BLACK);\r\n\r\n                TextView amountText = new TextView(requireContext());\r\n                amountText.setText(formatCurrency(amount));\r\n                amountText.setTextSize(14f);\r\n                amountText.setTextColor(Color.BLACK);\r\n                amountText.setGravity(View.TEXT_ALIGNMENT_VIEW_END);\r\n\r\n                itemLayout.addView(colorIndicator);\r\n                itemLayout.addView(categoryText);\r\n                itemLayout.addView(amountText);\r\n                categoryOverviewLayout.addView(itemLayout);\r\n            } while (cursor.moveToNext());\r\n        } else {\r\n            TextView emptyText = new TextView(requireContext());\r\n            emptyText.setText(\"No data available for this month.\");\r\n            emptyText.setTextSize(14f);\r\n            emptyText.setTextColor(Color.GRAY);\r\n            categoryOverviewLayout.addView(emptyText);\r\n        }\r\n        cursor.close();\r\n\r\n        // Cập nhật PieChart\r\n        PieDataSet pieDataSet = new PieDataSet(pieEntries, \"\");\r\n        pieDataSet.setColors(colors);\r\n        pieDataSet.setValueTextSize(12f);\r\n        pieDataSet.setValueTextColor(Color.BLACK);\r\n        pieDataSet.setValueFormatter(new PercentFormatter(pieChart));\r\n\r\n        PieData pieData = new PieData(pieDataSet);\r\n        pieChart.setData(pieData);\r\n        pieChart.setUsePercentValues(true);\r\n        pieChart.setDrawEntryLabels(false); // Ẩn nhãn trong biểu đồ\r\n        pieChart.invalidate();\r\n    }\r\n\r\n\r\n    private void updateHalfDonutChart(String month, String year) {\r\n        Cursor cursorIncome = expenseDB.getTotalByType(userId, month, year, 0);  // 0: income\r\n        Cursor cursorExpense = expenseDB.getTotalByType(userId, month, year, 1);  // 1: expense\r\n\r\n        float totalIncome = 0;\r\n        float totalExpense = 0;\r\n\r\n        if (cursorIncome.moveToFirst()) {\r\n            totalIncome = cursorIncome.getFloat(0);\r\n        }\r\n        if (cursorExpense.moveToFirst()) {\r\n            totalExpense = cursorExpense.getFloat(0);\r\n        }\r\n\r\n        cursorIncome.close();\r\n        cursorExpense.close();\r\n\r\n        ArrayList<PieEntry> entries = new ArrayList<>();\r\n        entries.add(new PieEntry(totalIncome, \"Income\"));\r\n        entries.add(new PieEntry(totalExpense, \"Expense\"));\r\n\r\n        PieDataSet dataSet = new PieDataSet(entries, \"\");\r\n        dataSet.setColors(ColorTemplate.MATERIAL_COLORS);\r\n        dataSet.setValueTextSize(12f);\r\n        dataSet.setValueTextColor(Color.BLACK);\r\n\r\n        PieData data = new PieData(dataSet);\r\n        halfDonutChart.setData(data);\r\n\r\n        halfDonutChart.setUsePercentValues(false);\r\n        halfDonutChart.setDrawHoleEnabled(true);\r\n        halfDonutChart.setHoleRadius(50f);\r\n        halfDonutChart.setTransparentCircleRadius(55f);\r\n\r\n        // Customize to make it half donut\r\n        halfDonutChart.setMaxAngle(180f);  // HALF CHART\r\n        halfDonutChart.setRotationAngle(180f);\r\n        halfDonutChart.setCenterText(\"Income vs Expense\");\r\n\r\n        halfDonutChart.invalidate(); // refresh\r\n\r\n        // Add comment logic\r\n        TextView comparisonCommentText = requireView().findViewById(R.id.comparisonCommentText);\r\n        String comment;\r\n        if (totalIncome > totalExpense) {\r\n            float savings = totalIncome - totalExpense;\r\n            comment = \"Great job! You saved \" + formatCurrency(savings) + \" this month.\";\r\n        } else if (totalIncome == totalExpense) {\r\n            comment = \"You broke even this month. Try to save more next time!\";\r\n        } else {\r\n            float overspend = totalExpense - totalIncome;\r\n            comment = \"Careful! You overspent by \" + formatCurrency(overspend) + \" this month.\";\r\n        }\r\n        comparisonCommentText.setText(comment);\r\n    }\r\n\r\n\r\n    private String formatCurrency(float amount) {\r\n        // Định dạng số tiền với dấu phân cách hàng nghìn\r\n        NumberFormat formatter = NumberFormat.getInstance(Locale.getDefault());\r\n        return formatter.format(amount);\r\n    }\r\n\r\n    private String[] getMonths() {\r\n        return new String[]{\r\n                \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n        };\r\n    }\r\n\r\n    private String[] getYears() {\r\n        int currentYear = Calendar.getInstance().get(Calendar.YEAR);\r\n        int startYear = currentYear - 10; // 10 năm trước\r\n        String[] years = new String[11];\r\n        for (int i = 0; i < years.length; i++) {\r\n            years[i] = String.valueOf(startYear + i);\r\n        }\r\n        return years;\r\n    }\r\n\r\n    private int getCurrentYearPosition() {\r\n        int currentYear = Calendar.getInstance().get(Calendar.YEAR);\r\n        String[] years = getYears();\r\n        for (int i = 0; i < years.length; i++) {\r\n            if (years[i].equals(String.valueOf(currentYear))) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0; // Mặc định là năm đầu tiên nếu không tìm thấy\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/expensemanagementstudent/Fragment/InsightFragment.java b/app/src/main/java/com/example/expensemanagementstudent/Fragment/InsightFragment.java
--- a/app/src/main/java/com/example/expensemanagementstudent/Fragment/InsightFragment.java	
+++ b/app/src/main/java/com/example/expensemanagementstudent/Fragment/InsightFragment.java	
@@ -105,7 +105,7 @@
         yearSpinner.setOnItemSelectedListener(onItemSelectedListener);
 
         // Khởi tạo dữ liệu cho tháng và năm đầu tiên
-        monthSpinner.setSelection(0); // Mặc định tháng 1
+        monthSpinner.setSelection(12); // Mặc định tháng 1
         yearSpinner.setSelection(getCurrentYearPosition()); // Mặc định năm hiện tại
     }
 
Index: app/src/main/java/com/example/expensemanagementstudent/db/DatabaseHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.expensemanagementstudent.db;\r\n\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.database.Cursor;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.database.sqlite.SQLiteOpenHelper;\r\n\r\npublic class DatabaseHelper extends SQLiteOpenHelper {\r\n\r\n    private static final String DATABASE_NAME = \"ExpenseManagement.db\";\r\n    private static final int DATABASE_VERSION = 2; // Incremented version to trigger onUpgrade\r\n\r\n    // Table names\r\n    public static final String USER_TABLE = \"users\";\r\n    public static final String CATEGORY_TABLE = \"categories\";\r\n    public static final String EXPENSE_TABLE = \"expenses\";\r\n    public static final String BUDGET_TABLE = \"budgets\";\r\n\r\n    // Columns for \"users\" table\r\n    public static final String USER_ID_COL = \"id\";\r\n    public static final String USERNAME_COL = \"username\";\r\n    public static final String EMAIL_COL = \"email\";\r\n    public static final String ADDRESS_COL = \"address\";\r\n    public static final String PASS_COL = \"password\";\r\n    public static final String GENDER_COL = \"gender\";\r\n    public static final String CREATED_COL = \"created_at\";\r\n    public static final String UPDATED_COL = \"updated_at\";\r\n\r\n    // Columns for \"categories\" table\r\n    public static final String CATEGORY_ID_COL = \"_id\";\r\n    public static final String CATEGORY_NAME_COL = \"name\";\r\n    public static final String CATEGORY_ICON_COL = \"icon\";\r\n    public static final String CATEGORY_TYPE_COL = \"type\"; // 0 for income, 1 for expense\r\n\r\n    // Columns for \"budgets\" table\r\n    public static final String BUDGET_ID_COL = \"id\";\r\n    public static final String BUDGET_AMOUNT_COL = \"amount\";\r\n    public static final String BUDGET_TYPE_COL = \"type\"; // 0: income, 1: expense\r\n    public static final String BUDGET_CATEGORY_ID_COL = \"category_id\";\r\n\r\n    // Columns for \"expenses\" table\r\n    public static final String EXPENSE_ID_COL = \"id\";\r\n    public static final String TYPE_COL = \"type\"; // 0: income, 1: expense\r\n    public static final String AMOUNT_COL = \"amount\";\r\n    public static final String DESCRIPTION_COL = \"description\";\r\n    public static final String DATE_COL = \"date\";\r\n    public static final String EXPENSE_USER_ID_COL = \"user_id\";\r\n    public static final String EXPENSE_CATEGORY_ID_COL = \"category_id\";\r\n\r\n    public DatabaseHelper(Context context) {\r\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(SQLiteDatabase db) {\r\n        // Create \"users\" table\r\n        String createUserTable = \"CREATE TABLE \" + USER_TABLE + \" (\" +\r\n                USER_ID_COL + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +\r\n                USERNAME_COL + \" TEXT NOT NULL, \" +\r\n                EMAIL_COL + \" TEXT NOT NULL, \" +\r\n                ADDRESS_COL + \" TEXT, \" +\r\n                PASS_COL + \" TEXT NOT NULL, \" +\r\n                GENDER_COL + \" TEXT, \" +\r\n                CREATED_COL + \" TEXT DEFAULT CURRENT_TIMESTAMP, \" +\r\n                UPDATED_COL + \" TEXT DEFAULT CURRENT_TIMESTAMP);\";\r\n        db.execSQL(createUserTable);\r\n\r\n        // Create \"categories\" table\r\n        String createCategoryTable = \"CREATE TABLE \" + CATEGORY_TABLE + \" (\" +\r\n                CATEGORY_ID_COL + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +\r\n                CATEGORY_NAME_COL + \" TEXT NOT NULL, \" +\r\n                CATEGORY_ICON_COL + \" TEXT NOT NULL, \" +\r\n                CATEGORY_TYPE_COL + \" INTEGER NOT NULL DEFAULT 1);\"; // 1: expense (default), 0: income\r\n        db.execSQL(createCategoryTable);\r\n\r\n        // Create \"expenses\" table\r\n        String createExpenseTable = \"CREATE TABLE \" + EXPENSE_TABLE + \" (\" +\r\n                EXPENSE_ID_COL + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +\r\n                TYPE_COL + \" INTEGER NOT NULL, \" +\r\n                AMOUNT_COL + \" REAL NOT NULL, \" +\r\n                DESCRIPTION_COL + \" TEXT, \" +\r\n                DATE_COL + \" TEXT NOT NULL, \" +\r\n                EXPENSE_USER_ID_COL + \" INTEGER, \" +\r\n                EXPENSE_CATEGORY_ID_COL + \" INTEGER, \" +\r\n                \"FOREIGN KEY(\" + EXPENSE_USER_ID_COL + \") REFERENCES \" + USER_TABLE + \"(\" + USER_ID_COL + \"), \" +\r\n                \"FOREIGN KEY(\" + EXPENSE_CATEGORY_ID_COL + \") REFERENCES \" + CATEGORY_TABLE + \"(\" + CATEGORY_ID_COL + \"));\";\r\n        db.execSQL(createExpenseTable);\r\n\r\n        // Create budgets table\r\n        String createBudgetTable = \"CREATE TABLE \" + BUDGET_TABLE + \" (\" +\r\n                BUDGET_ID_COL + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +\r\n                BUDGET_AMOUNT_COL + \" REAL NOT NULL, \" +\r\n                BUDGET_TYPE_COL + \" INTEGER NOT NULL, \" +\r\n                BUDGET_CATEGORY_ID_COL + \" INTEGER, \" +\r\n                \"FOREIGN KEY(\" + BUDGET_CATEGORY_ID_COL + \") REFERENCES \" + CATEGORY_TABLE + \"(\" + CATEGORY_ID_COL + \"));\";\r\n        db.execSQL(createBudgetTable);\r\n    }\r\n\r\n    @Override\r\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\r\n        if (oldVersion < 2) {\r\n\r\n            // Đổi tên bảng cũ\r\n            db.execSQL(\"ALTER TABLE \" + CATEGORY_TABLE + \" RENAME TO \" + CATEGORY_TABLE + \"_old;\");\r\n\r\n            // Tạo bảng mới\r\n            String createCategoryTable = \"CREATE TABLE \" + CATEGORY_TABLE + \" (\" +\r\n                    CATEGORY_ID_COL + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +\r\n                    CATEGORY_NAME_COL + \" TEXT NOT NULL, \" +\r\n                    CATEGORY_ICON_COL + \" TEXT NOT NULL, \" +\r\n                    CATEGORY_TYPE_COL + \" INTEGER NOT NULL DEFAULT 1);\"; // 1: expense (default), 0: income\r\n            db.execSQL(createCategoryTable);\r\n\r\n            // Di chuyển dữ liệu từ bảng cũ sang bảng mới\r\n            String migrateData = \"INSERT INTO \" + CATEGORY_TABLE + \" (\" +\r\n                    CATEGORY_ID_COL + \", \" +\r\n                    CATEGORY_NAME_COL + \", \" +\r\n                    CATEGORY_ICON_COL + \", \" +\r\n                    CATEGORY_TYPE_COL + \") \" +\r\n                    \"SELECT \" +\r\n                    CATEGORY_ID_COL + \", \" +\r\n                    CATEGORY_NAME_COL + \", \" +\r\n                    CATEGORY_ICON_COL + \", \" +\r\n                    \"1 \" + // Mặc định tất cả là \"expense\" nếu không có cột `is_income`\r\n                    \"FROM \" + CATEGORY_TABLE + \"_old;\";\r\n            db.execSQL(migrateData);\r\n\r\n            // Xóa bảng cũ\r\n            db.execSQL(\"DROP TABLE \" + CATEGORY_TABLE + \"_old;\");\r\n        }\r\n    }\r\n    public Cursor getUser(String username, String password) {\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        return db.rawQuery(\r\n                \"SELECT id, username FROM users WHERE username = ? AND password = ?\",\r\n                new String[]{username, password}\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/expensemanagementstudent/db/DatabaseHelper.java b/app/src/main/java/com/example/expensemanagementstudent/db/DatabaseHelper.java
--- a/app/src/main/java/com/example/expensemanagementstudent/db/DatabaseHelper.java	
+++ b/app/src/main/java/com/example/expensemanagementstudent/db/DatabaseHelper.java	
@@ -31,7 +31,7 @@
     public static final String CATEGORY_ID_COL = "_id";
     public static final String CATEGORY_NAME_COL = "name";
     public static final String CATEGORY_ICON_COL = "icon";
-    public static final String CATEGORY_TYPE_COL = "type"; // 0 for income, 1 for expense
+    public static final String CATEGORY_TYPE_COL = "type"; // 1 for income, 0 for expense
 
     // Columns for "budgets" table
     public static final String BUDGET_ID_COL = "id";
