Index: app/src/main/java/com/example/expensemanagementstudent/TransactionActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.expensemanagementstudent;\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.content.res.ColorStateList;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageButton;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.example.expensemanagementstudent.db.DatabaseHelper;\r\nimport com.google.android.material.button.MaterialButton;\r\nimport com.google.android.material.button.MaterialButtonToggleGroup;\r\nimport com.google.android.material.textfield.TextInputEditText;\r\nimport com.google.android.material.textfield.TextInputLayout;\r\n\r\nimport java.util.Calendar;\r\n\r\npublic class TransactionActivity extends AppCompatActivity {\r\n    private DatabaseHelper dbHelper;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_transaction);\r\n\r\n        dbHelper = new DatabaseHelper(this);\r\n\r\n        // Initialize the back button\r\n        ImageButton btnBack = findViewById(R.id.btnBack);\r\n\r\n        // Set the back button's onClickListener\r\n        btnBack.setOnClickListener(v -> {\r\n            onBackPressed(); // Handle the back action\r\n        });\r\n\r\n        TextInputEditText inputAmount = findViewById(R.id.input_amount);\r\n        // Initialize the views\r\n        MaterialButtonToggleGroup toggleGroup = findViewById(R.id.transaction_type_toggle);\r\n        Button btnSubmit = findViewById(R.id.btn_submit);\r\n\r\n        // Set default selected to \"Expense\" and update the button text\r\n        toggleGroup.check(R.id.btn_expense);\r\n        btnSubmit.setText(\"Add Expense\");\r\n\r\n        // Add listener for toggle group to update button text\r\n        toggleGroup.addOnButtonCheckedListener((group, checkedId, isChecked) -> {\r\n            if (isChecked) {\r\n                if (checkedId == R.id.btn_expense) {\r\n                    btnSubmit.setText(\"Add Expense\");\r\n                } else if (checkedId == R.id.btn_income) {\r\n                    btnSubmit.setText(\"Add Income\");\r\n                }\r\n            }\r\n        });\r\n        // Add TextWatcher to append \"$\" at the end\r\n        inputAmount.addTextChangedListener(new TextWatcher() {\r\n            private String current = \"\";\r\n\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n                if (!s.toString().equals(current)) {\r\n                    inputAmount.removeTextChangedListener(this);\r\n\r\n                    String input = s.toString().replace(\"$\", \"\").trim(); // Remove \"$\" to avoid duplication\r\n                    if (!input.isEmpty()) {\r\n                        current = input + \" $\"; // Append \"$\" at the end\r\n                        inputAmount.setText(current);\r\n                        inputAmount.setSelection(input.length()); // Set cursor position before \"$\"\r\n                    }\r\n\r\n                    inputAmount.addTextChangedListener(this);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Other initialization code\r\n        Spinner categorySpinner = findViewById(R.id.category_spinner);\r\n        EditText inputDate = findViewById(R.id.input_date);\r\n        EditText inputNotes = findViewById(R.id.input_notes);\r\n\r\n        // Set default date to today\r\n        Calendar calendar = Calendar.getInstance();\r\n        inputDate.setText(formatDate(calendar));\r\n\r\n        // Date picker for transaction date\r\n        inputDate.setOnClickListener(v -> {\r\n            DatePickerDialog datePicker = new DatePickerDialog(this,\r\n                    (view, year, month, dayOfMonth) -> {\r\n                        calendar.set(year, month, dayOfMonth);\r\n                        inputDate.setText(formatDate(calendar));\r\n                    },\r\n                    calendar.get(Calendar.YEAR),\r\n                    calendar.get(Calendar.MONTH),\r\n                    calendar.get(Calendar.DAY_OF_MONTH)\r\n            );\r\n            datePicker.show();\r\n        });\r\n\r\n        // Set default selected to \"Expense\"\r\n        toggleGroup.check(R.id.btn_expense);\r\n\r\n        // Apply the default styles for Expense (selected) and Income (unselected)\r\n        MaterialButton btnExpense = findViewById(R.id.btn_expense);\r\n        MaterialButton btnIncome = findViewById(R.id.btn_income);\r\n        btnExpense.setBackgroundTintList(ColorStateList.valueOf(getResources().getColor(R.color.toggle_selected)));\r\n        btnExpense.setTextColor(getResources().getColor(R.color.toggle_text_selected));\r\n        btnIncome.setBackgroundTintList(ColorStateList.valueOf(getResources().getColor(R.color.toggle_unselected)));\r\n        btnIncome.setTextColor(getResources().getColor(R.color.toggle_text_unselected));\r\n\r\n        // Handle toggle button state changes\r\n        toggleGroup.addOnButtonCheckedListener((group, checkedId, isChecked) -> {\r\n            if (checkedId == R.id.btn_expense && isChecked) {\r\n                btnExpense.setBackgroundTintList(ColorStateList.valueOf(getResources().getColor(R.color.toggle_selected)));\r\n                btnExpense.setTextColor(getResources().getColor(R.color.toggle_text_selected));\r\n\r\n                btnIncome.setBackgroundTintList(ColorStateList.valueOf(getResources().getColor(R.color.toggle_unselected)));\r\n                btnIncome.setTextColor(getResources().getColor(R.color.toggle_text_unselected));\r\n            } else if (checkedId == R.id.btn_income && isChecked) {\r\n                btnIncome.setBackgroundTintList(ColorStateList.valueOf(getResources().getColor(R.color.toggle_selected)));\r\n                btnIncome.setTextColor(getResources().getColor(R.color.toggle_text_selected));\r\n\r\n                btnExpense.setBackgroundTintList(ColorStateList.valueOf(getResources().getColor(R.color.toggle_unselected)));\r\n                btnExpense.setTextColor(getResources().getColor(R.color.toggle_text_unselected));\r\n            }\r\n        });\r\n\r\n        btnSubmit.setOnClickListener(v -> {\r\n            // Validate amount input\r\n            if (inputAmount.getText().toString().isEmpty()) {\r\n                Toast.makeText(this, \"Please enter an amount\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n\r\n            double amount = Double.parseDouble(inputAmount.getText().toString());\r\n            String category = categorySpinner.getSelectedItem().toString();\r\n            String date = inputDate.getText().toString();\r\n            String notes = inputNotes.getText().toString();\r\n\r\n            // Determine if it's Income or Expense\r\n            int type = (toggleGroup.getCheckedButtonId() == R.id.btn_income) ? 1 : 0;\r\n\r\n            // Save to the database\r\n            long transactionId = dbHelper.addTransaction(type, amount, notes, date, 1, getCategoryId(category)); // Assuming user ID is 1 for now\r\n            if (transactionId != -1) {\r\n                Toast.makeText(this, \"Transaction saved successfully\", Toast.LENGTH_SHORT).show();\r\n                finish(); // Close the activity after saving\r\n            } else {\r\n                Toast.makeText(this, \"Error saving transaction\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n    @Override\r\n    public boolean dispatchTouchEvent(MotionEvent event) {\r\n        // Check if the touch event is outside the currently focused view\r\n        if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n            View view = getCurrentFocus();\r\n            if (view instanceof EditText || view instanceof TextInputEditText) {\r\n                // Clear focus and hide keyboard\r\n                view.clearFocus();\r\n                InputMethodManager imm = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n                if (imm != null) {\r\n                    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\r\n                }\r\n            }\r\n        }\r\n        return super.dispatchTouchEvent(event);\r\n    }\r\n\r\n    // Helper method to format the date\r\n    private String formatDate(Calendar calendar) {\r\n        return android.text.format.DateFormat.format(\"yyyy-MM-dd\", calendar).toString();\r\n    }\r\n\r\n    // Dummy method to get category ID from name\r\n    // Ideally, you should query the database to fetch the category ID\r\n    private int getCategoryId(String categoryName) {\r\n        // Example mapping (you should implement proper logic here)\r\n        switch (categoryName) {\r\n            case \"Food\": return 1;\r\n            case \"Shopping\": return 2;\r\n            case \"Entertainment\": return 3;\r\n            default: return 0; // Default or unknown category\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/expensemanagementstudent/TransactionActivity.java b/app/src/main/java/com/example/expensemanagementstudent/TransactionActivity.java
--- a/app/src/main/java/com/example/expensemanagementstudent/TransactionActivity.java	(revision 190153954bda95f1c502552272dc89f534f10684)
+++ b/app/src/main/java/com/example/expensemanagementstudent/TransactionActivity.java	(date 1732986908064)
@@ -185,7 +185,7 @@
 
     // Helper method to format the date
     private String formatDate(Calendar calendar) {
-        return android.text.format.DateFormat.format("yyyy-MM-dd", calendar).toString();
+        return android.text.format.DateFormat.format("dd-MM-yyyy", calendar).toString();
     }
 
     // Dummy method to get category ID from name
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n        <DropdownSelection timestamp=\"2024-11-29T03:14:36.245147800Z\">\r\n          <Target type=\"DEFAULT_BOOT\">\r\n            <handle>\r\n              <DeviceId pluginId=\"LocalEmulator\" identifier=\"path=C:\\Users\\admin\\.android\\avd\\Pixel_4_API_35.avd\" />\r\n            </handle>\r\n          </Target>\r\n        </DropdownSelection>\r\n        <DialogSelection />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision 190153954bda95f1c502552272dc89f534f10684)
+++ b/.idea/deploymentTargetSelector.xml	(date 1733118429980)
@@ -13,6 +13,9 @@
         </DropdownSelection>
         <DialogSelection />
       </SelectionState>
+      <SelectionState runConfigName="MainActivity">
+        <option name="selectionMode" value="DROPDOWN" />
+      </SelectionState>
     </selectionStates>
   </component>
 </project>
\ No newline at end of file
